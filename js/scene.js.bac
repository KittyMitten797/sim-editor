var scene = {
	lastSceneID: 0,
	
	sceneRecord: {
		id: -1,
		xPos: 0,
		yPos: 0,
		title: '',
		initEvents: ''
	},
	
	sceneRecords: [],
	
	init: function() {
		this.addNextScene();
	},
	
	instance: '',
	
	addNextScene: function() {
		// are we initializing?
		if(this.lastSceneID == 0) {
			$('#canvas').append('<div class="window jtk-node" id="scene-0"><strong>Init</strong></div>')
		} else {
			var sceneID = 'scene-' + this.lastSceneID;
			$('#canvas').append('<div class="window jtk-node" id="'+ sceneID + '"><strong>New Scene</strong></div>')

			// register new scene with jsPlumb
			scene.instance.draggable(jsPlumb.getSelector("#" + sceneID), { grid: [20, 20] });
		}
		
		// position new div
		$('#scene-' + this.lastSceneID).css({
			"top": "10px",
			"left": "10px"
		});

		this.sceneRecords[this.lastSceneID] = this.sceneRecord;
		this.sceneRecords[this.lastSceneID].id = this.lastSceneID;
		this.lastSceneID++;
		
	},
};

// list of source and target anchors 
var sourceAnchorsPos = new Array(
	[[0.5, 1, 0, 1, 0, 0], 0.1],
	[[0.5, 1, 0, 1, 30, 0], 0.3],
	[[0.5, 1, 0, 1, -30, 0], 0.7],
	[[0.0, 0.5, -1, 0, 0, 0], 0.1],
	[[0.0, 0.5, -1, 0, 0, 30], 0.3],
	[[0.0, 0.5, -1, 0, 0, -30], 0.7],
	[[1, 0.5, 1, 0, 0, 0], 0.1],
	[[1, 0.5, 1, 0, 0, 30], 0.3],
	[[1, 0.5, 1, 0, 0, -30], 0.7]
);

jsPlumb.ready(function () {
	scene.init();


    scene.instance = window.jsp = jsPlumb.getInstance({
        // default drag options
        DragOptions: { cursor: 'pointer', zIndex: 2000 },
        // the overlays to decorate each connection with.  note that the label overlay uses a function to generate the label text; in this
        // case it returns the 'labelText' member that we set on each connection in the 'init' method below.
        ConnectionOverlays: [
            [ "Arrow", {
                location: 1,
                visible:true,
                width:11,
                length:11,
                id:"ARROW1",
                events:{
                    click:function() { alert("you clicked on the arrow1 overlay")}
                }
            } ],
            [ "Arrow", {
                location: 0,
                visible:true,
                width:11,
                length:11,
                id:"ARROW2",
                events:{
                    click:function() { alert("you clicked on the arrow2 overlay")}
                }
            } ],
            [ "Label", {
                location: 0.1,
                id: "label",
                cssClass: "aLabel",
                events:{
                    click:function() { alert("hey"); }
                }
            }]
        ],
       Container: "canvas"
    });

    // this is the paint style for the connecting lines..
    var connectorPaintStyle = {
            strokeWidth: 1,
            stroke: "#61B7CF",
            joinstyle: "round",
            outlineStroke: "white",
            outlineWidth: 2
        },
    // .. and this is the hover style.
        connectorHoverStyle = {
            strokeWidth: 3,
            stroke: "#216477",
            outlineWidth: 5,
            outlineStroke: "white"
        },
        endpointHoverStyle = {
            fill: "#216477",
            stroke: "#216477"
        },
    // the definition of source endpoints (the small blue ones)
        sourceEndpoint = {
            endpoint: "Dot",
            paintStyle: {
                stroke: "#7AB02C",
                fill: "transparent",
                radius: 7,
                strokeWidth: 1
            },
            isSource: true,
            connector: [ "Flowchart", { stub: [50, 50], gap: 10, cornerRadius: 10, alwaysRespectStubs: true } ],
            connectorStyle: connectorPaintStyle,
            hoverPaintStyle: endpointHoverStyle,
            connectorHoverStyle: connectorHoverStyle,
            dragOptions: {},
            overlays: [
                [ "Label", {
                    location: [0.5, 1.5],
                    label: "Drag",
                    cssClass: "endpointSourceLabel",
                    visible:false
                } ]
            ]
        },
    // the definition of target endpoints (will appear when the user drags a connection)
        targetEndpoint = {
            endpoint: "Dot",
            paintStyle: { fill: "#7AB02C", radius: 7 },
            hoverPaintStyle: endpointHoverStyle,
            maxConnections: -1,
            dropOptions: { hoverClass: "hover", activeClass: "active" },
            isTarget: true,
            overlays: [
                [ "Label", { location: [0.5, -0.5], label: "Drop", cssClass: "endpointTargetLabel", visible:false } ]
            ]
        },
        init = function (connection) {
            connection.getOverlay("label").setLabel(connection.sourceId.substring(15) + "-" + connection.targetId.substring(15));
			connection.getOverlay("label").setLocation(connection.getParameter("location"));
        };

    var _addEndpoints = function (toId, sourceAnchors, targetAnchors) {
        for (var i = 0; i < sourceAnchors.length; i++) {
            var sourceUUID = toId + sourceAnchors[i];
            scene.instance.addEndpoint("scene-" + toId, sourceEndpoint, {
				anchor: sourceAnchors[i][0], uuid: sourceUUID, parameters: {"source": sourceUUID, "location": sourceAnchors[i][1]}
            });
        }
        for (var j = 0; j < targetAnchors.length; j++) {
            var targetUUID = toId + targetAnchors[j];
            scene.instance.addEndpoint("scene-" + toId, targetEndpoint, { anchor: targetAnchors[j], uuid: targetUUID });
        }
    };

    // suspend drawing and initialise.
    scene.instance.batch(function () {

        _addEndpoints("0", [
									scene.sourceAnchorsPos[0],
									scene.sourceAnchorsPos[1],
									scene.sourceAnchorsPos[2],
									scene.sourceAnchorsPos[3],
									scene.sourceAnchorsPos[4],
									scene.sourceAnchorsPos[5],
									scene.sourceAnchorsPos[6],
									scene.sourceAnchorsPos[7],
									scene.sourceAnchorsPos[8]
							],
								["Top"]);


        // listen for new connections; initialise them the same way we initialise the connections at startup.
        scene.instance.bind("connection", function (connInfo, originalEvent) {
            init(connInfo.connection)
        });

        // make all the window divs draggable
        scene.instance.draggable(jsPlumb.getSelector(".flowchart-demo .window"), { grid: [20, 20] });
        // THIS DEMO ONLY USES getSelector FOR CONVENIENCE. Use your library's appropriate selector
        // method, or document.querySelectorAll:
        //jsPlumb.draggable(document.querySelectorAll(".window"), { grid: [20, 20] });

        // connect a few up
/*
        scene.instance.connect({ editable: true, parameters: {"test": "This-is-a-test", "test2": "hiya!"}});
        scene.instance.connect({uuids: ["Window2LeftMiddle", "Window4LeftMiddle"], editable: true});
        scene.instance.connect({uuids: ["Window4TopCenter", "Window4RightMiddle"], editable: true});
        scene.instance.connect({uuids: ["Window3RightMiddle", "Window2RightMiddle"], editable: true});
        scene.instance.connect({uuids: ["Window4BottomCenter", "Window1TopCenter"], editable: true});
        scene.instance.connect({uuids: ["Window3BottomCenter", "Window1BottomCenter"], editable: true});
*/
        //
		
		var connections = scene.instance.getAllConnections();
console.log(connections[0]);

        //
        // listen for clicks on connections, and offer to delete connections on click.
        //
        scene.instance.bind("click", function (conn, originalEvent) {
           // if (confirm("Delete connection from " + conn.sourceId + " to " + conn.targetId + "?"))
             //   scene.instance.detach(conn);
console.log(conn.getOverlay("label").getLabel());
console.log(conn.getParameters());
 //           conn.toggleType("basic");
        });
		
		scene.instance.bind("endpointClick", function(endpoint, originalEvent) {
alert("Endpoint clicked!");
console.log(endpoint.getParameters());
		});

        scene.instance.bind("connectionDrag", function (connection) {
            console.log("connection " + connection.id + " is being dragged. suspendedElement is ", connection.suspendedElement, " of type ", connection.suspendedElementType);
        });

        scene.instance.bind("connectionDragStop", function (connection) {
            console.log("connection " + connection.id + " was dragged");
        });

        scene.instance.bind("connectionMoved", function (params) {
            console.log("connection " + params.connection.id + " was moved");
        });
    });

    jsPlumb.fire("jsPlumbDemoLoaded", scene.instance);

});